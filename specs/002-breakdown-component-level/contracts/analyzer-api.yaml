openapi: 3.0.0
info:
  title: Component Analyzer API
  description: API for analyzing and categorizing React components following atomic design principles
  version: 1.0.0

servers:
  - url: http://localhost:3000/api/analyzer
    description: Local development server

paths:
  /analyze:
    post:
      summary: Analyze components in specified directory
      operationId: analyzeComponents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - targetPath
              properties:
                targetPath:
                  type: string
                  description: Path to analyze
                  example: "apps/web/src/components"
                options:
                  type: object
                  properties:
                    recursive:
                      type: boolean
                      default: true
                    includeTests:
                      type: boolean
                      default: false
                    maxDepth:
                      type: integer
                      default: 10
      responses:
        '200':
          description: Analysis complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /molecules:
    get:
      summary: Get all identified molecules
      operationId: getMolecules
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, usageCount, createdAt]
            default: name
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of molecules
          content:
            application/json:
              schema:
                type: object
                properties:
                  molecules:
                    type: array
                    items:
                      $ref: '#/components/schemas/Molecule'
                  total:
                    type: integer

  /duplicates:
    post:
      summary: Detect duplicate components
      operationId: detectDuplicates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                threshold:
                  type: number
                  minimum: 0
                  maximum: 100
                  default: 75
                  description: Similarity threshold percentage
                componentType:
                  type: string
                  enum: [all, atom, molecule, organism]
                  default: all
      responses:
        '200':
          description: Duplicate detection results
          content:
            application/json:
              schema:
                type: object
                properties:
                  duplicates:
                    type: array
                    items:
                      $ref: '#/components/schemas/DuplicateGroup'
                  totalGroups:
                    type: integer

  /consistency/validate:
    post:
      summary: Validate components against consistency rules
      operationId: validateConsistency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentIds:
                  type: array
                  items:
                    type: string
                  description: Specific components to validate (empty = all)
                rules:
                  type: array
                  items:
                    type: string
                  description: Specific rules to apply (empty = all)
      responses:
        '200':
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'

  /documentation/generate:
    post:
      summary: Generate documentation for components
      operationId: generateDocumentation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - format
              properties:
                format:
                  type: string
                  enum: [markdown, json, html]
                componentIds:
                  type: array
                  items:
                    type: string
                  description: Specific components (empty = all)
                includeExamples:
                  type: boolean
                  default: true
                includeVisuals:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Documentation generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputPath:
                    type: string
                  filesGenerated:
                    type: array
                    items:
                      type: string
                  totalComponents:
                    type: integer

  /registry:
    get:
      summary: Get the complete component registry
      operationId: getRegistry
      responses:
        '200':
          description: Component registry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRegistry'

    put:
      summary: Update the component registry
      operationId: updateRegistry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentRegistry'
      responses:
        '200':
          description: Registry updated
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  schemas:
    Component:
      type: object
      required:
        - id
        - name
        - type
        - filePath
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [atom, molecule, organism]
        filePath:
          type: string
        category:
          type: string
        description:
          type: string
        props:
          type: array
          items:
            $ref: '#/components/schemas/PropDefinition'
        dependencies:
          type: array
          items:
            type: string
        usageCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deprecated:
          type: boolean
        version:
          type: string

    Molecule:
      allOf:
        - $ref: '#/components/schemas/Component'
        - type: object
          properties:
            composition:
              type: array
              items:
                type: object
                properties:
                  atomId:
                    type: string
                  quantity:
                    type: integer
                  required:
                    type: boolean
                  role:
                    type: string
            layout:
              type: string
              enum: [horizontal, vertical, grid, absolute, flexible]

    PropDefinition:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        required:
          type: boolean
        defaultValue:
          type: any
        description:
          type: string

    ComponentRegistry:
      type: object
      properties:
        id:
          type: string
        projectName:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        lastUpdated:
          type: string
          format: date-time
        statistics:
          type: object
          properties:
            totalComponents:
              type: integer
            atomCount:
              type: integer
            moleculeCount:
              type: integer
            organismCount:
              type: integer

    AnalysisResult:
      type: object
      properties:
        componentsFound:
          type: integer
        categorized:
          type: object
          properties:
            atoms:
              type: integer
            molecules:
              type: integer
            organisms:
              type: integer
        uncategorized:
          type: integer
        errors:
          type: array
          items:
            type: string
        duration:
          type: integer
          description: Analysis duration in milliseconds

    DuplicateGroup:
      type: object
      properties:
        similarity:
          type: number
        components:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              filePath:
                type: string
        suggestedMerge:
          type: string
          description: ID of component to keep

    ValidationResult:
      type: object
      properties:
        valid:
          type: boolean
        errors:
          type: array
          items:
            type: object
            properties:
              componentId:
                type: string
              ruleId:
                type: string
              message:
                type: string
              severity:
                type: string
                enum: [error, warning, info]
        warnings:
          type: array
          items:
            type: object
            properties:
              componentId:
                type: string
              message:
                type: string
        summary:
          type: object
          properties:
            totalChecked:
              type: integer
            passed:
              type: integer
            failed:
              type: integer

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              stack:
                type: string