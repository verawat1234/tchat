openapi: 3.0.3
info:
  title: Component Test Generator API
  description: API for automated test generation and management for React components
  version: 1.0.0
  contact:
    name: Testing Team

servers:
  - url: http://localhost:3001/api/test-generator
    description: Development server
  - url: https://test-generator.tchat.local/api
    description: Local testing server

paths:
  /components:
    get:
      summary: Get all components in the project
      operationId: getComponents
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [atom, molecule, organism]
          description: Filter by component type
        - name: status
          in: query
          schema:
            type: string
            enum: [untested, partial, complete, failing]
          description: Filter by test status
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Components retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  components:
                    type: array
                    items:
                      $ref: '#/components/schemas/Component'
                  total:
                    type: integer
                  hasMore:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'

    post:
      summary: Analyze and register a new component for testing
      operationId: analyzeComponent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - filePath
              properties:
                filePath:
                  type: string
                  description: Path to component source file
                  example: "src/components/ui/Button.tsx"
                forceReanalyze:
                  type: boolean
                  default: false
                  description: Force re-analysis of existing component
      responses:
        '201':
          description: Component analyzed and registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Component already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Component already registered"
                  existingComponent:
                    $ref: '#/components/schemas/Component'

  /components/{componentId}:
    get:
      summary: Get component details
      operationId: getComponent
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Component details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update component information
      operationId: updateComponent
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [untested, partial, complete, failing]
                accessibility:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccessibilityRequirement'
                interactions:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserInteraction'
      responses:
        '200':
          description: Component updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
        '404':
          $ref: '#/components/responses/NotFound'

  /components/{componentId}/tests:
    get:
      summary: Get test suites for a component
      operationId: getComponentTests
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
            enum: [unit, integration, e2e, visual, performance]
      responses:
        '200':
          description: Test suites retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestSuite'

    post:
      summary: Generate tests for a component
      operationId: generateTests
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - testTypes
              properties:
                testTypes:
                  type: array
                  items:
                    type: string
                    enum: [unit, integration, e2e, visual, performance, accessibility]
                  description: Types of tests to generate
                coverage:
                  type: object
                  properties:
                    target:
                      type: number
                      minimum: 0
                      maximum: 100
                      description: Target coverage percentage
                template:
                  type: string
                  enum: [basic, comprehensive, minimal]
                  default: basic
                  description: Test template complexity level
      responses:
        '201':
          description: Tests generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  testSuites:
                    type: array
                    items:
                      $ref: '#/components/schemas/TestSuite'
                  summary:
                    type: object
                    properties:
                      totalTests:
                        type: integer
                      estimatedCoverage:
                        type: number
                      generatedFiles:
                        type: array
                        items:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'

  /test-suites/{suiteId}/run:
    post:
      summary: Execute a test suite
      operationId: runTestSuite
      parameters:
        - name: suiteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                environment:
                  type: string
                  enum: [node, jsdom, browser]
                  default: jsdom
                browser:
                  type: string
                  enum: [chromium, firefox, webkit]
                  description: Browser for E2E tests
                parallel:
                  type: boolean
                  default: true
                  description: Run tests in parallel
                timeout:
                  type: integer
                  default: 30000
                  description: Test timeout in milliseconds
      responses:
        '200':
          description: Test execution started
          content:
            application/json:
              schema:
                type: object
                properties:
                  executionId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [queued, running]
                  estimatedDuration:
                    type: integer
                    description: Estimated duration in seconds

  /test-executions/{executionId}:
    get:
      summary: Get test execution status and results
      operationId: getTestExecution
      parameters:
        - name: executionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Test execution status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestExecution'

  /coverage:
    get:
      summary: Get overall test coverage report
      operationId: getCoverageReport
      parameters:
        - name: componentType
          in: query
          schema:
            type: string
            enum: [atom, molecule, organism]
        - name: format
          in: query
          schema:
            type: string
            enum: [json, html, lcov]
            default: json
      responses:
        '200':
          description: Coverage report retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageReport'
            text/html:
              schema:
                type: string
                description: HTML coverage report
            text/plain:
              schema:
                type: string
                description: LCOV coverage data

  /reports/summary:
    get:
      summary: Get testing summary dashboard
      operationId: getTestingSummary
      responses:
        '200':
          description: Testing summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  overview:
                    type: object
                    properties:
                      totalComponents:
                        type: integer
                      testedComponents:
                        type: integer
                      overallCoverage:
                        type: number
                      passRate:
                        type: number
                  byType:
                    type: object
                    properties:
                      atoms:
                        $ref: '#/components/schemas/TypeSummary'
                      molecules:
                        $ref: '#/components/schemas/TypeSummary'
                      organisms:
                        $ref: '#/components/schemas/TypeSummary'
                  recentActivity:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityItem'

components:
  schemas:
    Component:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Button"
        type:
          type: string
          enum: [atom, molecule, organism]
        filePath:
          type: string
          example: "src/components/ui/Button.tsx"
        testFilePath:
          type: string
          nullable: true
          example: "src/components/ui/Button.test.tsx"
        props:
          type: array
          items:
            $ref: '#/components/schemas/ComponentProp'
        dependencies:
          type: array
          items:
            type: string
          description: Other components this depends on
        stories:
          type: array
          items:
            type: string
          description: Storybook story files
        accessibility:
          type: array
          items:
            $ref: '#/components/schemas/AccessibilityRequirement'
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/UserInteraction'
        status:
          type: string
          enum: [untested, partial, complete, failing]
        coverage:
          $ref: '#/components/schemas/CoverageMetrics'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ComponentProp:
      type: object
      properties:
        name:
          type: string
          example: "variant"
        type:
          type: string
          enum: [string, number, boolean, object, function, ReactNode]
        required:
          type: boolean
        defaultValue:
          description: Default value if optional
        description:
          type: string
          description: Prop description from comments
        examples:
          type: array
          items: {}
          description: Example values for testing

    TestSuite:
      type: object
      properties:
        id:
          type: string
          format: uuid
        componentId:
          type: string
          format: uuid
        type:
          type: string
          enum: [unit, integration, e2e, visual, performance]
        filePath:
          type: string
        testCases:
          type: array
          items:
            $ref: '#/components/schemas/TestCase'
        coverage:
          $ref: '#/components/schemas/CoverageMetrics'
        status:
          type: string
          enum: [pending, running, passed, failed, skipped]
        lastRun:
          type: string
          format: date-time
          nullable: true
        executionTime:
          type: number
          description: Last execution time in milliseconds
        environment:
          type: string
          enum: [browser, node, storybook]

    TestCase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "should render with primary variant"
        category:
          type: string
          enum: [rendering, props, interactions, accessibility, performance]
        priority:
          type: string
          enum: [critical, high, medium, low]
        status:
          type: string
          enum: [pending, passed, failed, skipped, flaky]
        executionHistory:
          type: array
          items:
            $ref: '#/components/schemas/TestExecution'

    AccessibilityRequirement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rule:
          type: string
          example: "2.1.1"
          description: WCAG rule reference
        level:
          type: string
          enum: [A, AA, AAA]
        description:
          type: string
        testMethod:
          type: string
          enum: [automated, manual, hybrid]
        assertion:
          type: string
          description: Test assertion to validate
        priority:
          type: string
          enum: [critical, high, medium, low]

    UserInteraction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [click, type, focus, hover, keypress, drag]
        target:
          type: string
          description: Element selector or description
        input:
          description: Input data for the interaction
        expectedBehavior:
          type: string
          description: Expected result description
        triggers:
          type: array
          items:
            type: string
          description: Events that should be triggered

    CoverageMetrics:
      type: object
      properties:
        lines:
          $ref: '#/components/schemas/CoverageData'
        branches:
          $ref: '#/components/schemas/CoverageData'
        functions:
          $ref: '#/components/schemas/CoverageData'
        statements:
          $ref: '#/components/schemas/CoverageData'
        overall:
          type: number
          description: Overall coverage percentage
        threshold:
          type: number
          description: Minimum required coverage

    CoverageData:
      type: object
      properties:
        total:
          type: integer
        covered:
          type: integer
        percentage:
          type: number
        uncovered:
          type: array
          items:
            type: string

    TestExecution:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, running, passed, failed, skipped, error]
        executionTime:
          type: number
          description: Execution time in milliseconds
        timestamp:
          type: string
          format: date-time
        environment:
          type: string
          enum: [browser, node, storybook]
        browser:
          type: string
          nullable: true
          description: Browser used for E2E tests
        error:
          type: object
          nullable: true
          properties:
            type:
              type: string
            message:
              type: string
            stack:
              type: string
            suggestions:
              type: array
              items:
                type: string
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/TestArtifact'

    TestArtifact:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [screenshot, video, log, coverage, performance]
        filePath:
          type: string
        size:
          type: number
          description: File size in bytes
        description:
          type: string
        createdAt:
          type: string
          format: date-time

    CoverageReport:
      type: object
      properties:
        overall:
          $ref: '#/components/schemas/CoverageMetrics'
        byComponent:
          type: array
          items:
            type: object
            properties:
              componentId:
                type: string
                format: uuid
              componentName:
                type: string
              coverage:
                $ref: '#/components/schemas/CoverageMetrics'
        summary:
          type: object
          properties:
            totalComponents:
              type: integer
            testedComponents:
              type: integer
            averageCoverage:
              type: number
            belowThreshold:
              type: integer

    TypeSummary:
      type: object
      properties:
        total:
          type: integer
        tested:
          type: integer
        coverage:
          type: number
        passRate:
          type: number

    ActivityItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [test_generated, test_executed, component_analyzed, coverage_updated]
        componentName:
          type: string
        description:
          type: string
        timestamp:
          type: string
          format: date-time
        status:
          type: string
          enum: [success, failure, warning]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              details:
                type: object

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Component not found"
              message:
                type: string
                example: "Component with ID {id} does not exist"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []