openapi: 3.0.3
info:
  title: Tchat Messaging Service API
  description: Real-time messaging and communication service
  version: 1.0.0

servers:
  - url: http://localhost:8082/api/v1
    description: Local development
  - url: https://messaging.tchat.sea/api/v1
    description: Production

paths:
  /dialogs:
    get:
      summary: Get user dialogs
      description: Retrieve list of user's conversations with pagination
      operationId: getUserDialogs
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: type
          in: query
          schema:
            type: string
            enum: [direct, group, channel]
      responses:
        '200':
          description: Dialogs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  dialogs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dialog'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create new dialog
      description: Create a new group conversation or channel
      operationId: createDialog
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - name
                - participant_ids
              properties:
                type:
                  type: string
                  enum: [group, channel]
                name:
                  type: string
                  maxLength: 100
                  example: "Project Team"
                description:
                  type: string
                  maxLength: 500
                  example: "Discussion about the new project"
                participant_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  maxItems: 1000
                avatar_url:
                  type: string
                  format: uri
      responses:
        '201':
          description: Dialog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialog'

  /dialogs/{dialog_id}/messages:
    get:
      summary: Get dialog messages
      description: Retrieve messages from a specific dialog with pagination
      operationId: getDialogMessages
      security:
        - BearerAuth: []
      parameters:
        - name: dialog_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: before
          in: query
          description: Get messages before this message ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  has_more:
                    type: boolean

    post:
      summary: Send message
      description: Send a new message to the dialog
      operationId: sendMessage
      security:
        - BearerAuth: []
      parameters:
        - name: dialog_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - message_type
              properties:
                content:
                  type: string
                  maxLength: 4000
                  example: "Hello everyone!"
                message_type:
                  type: string
                  enum: [text, image, video, audio, file, location, sticker]
                  example: "text"
                reply_to_id:
                  type: string
                  format: uuid
                  description: ID of message being replied to
                metadata:
                  type: object
                  description: Type-specific metadata (file info, location data, etc.)
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /dialogs/{dialog_id}/participants:
    post:
      summary: Add participants to dialog
      description: Add new participants to group or channel
      operationId: addParticipants
      security:
        - BearerAuth: []
      parameters:
        - name: dialog_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_ids
              properties:
                user_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  maxItems: 100
      responses:
        '200':
          description: Participants added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialog'

  /messages/{message_id}/reactions:
    post:
      summary: Add reaction to message
      description: Add emoji reaction to a message
      operationId: addReaction
      security:
        - BearerAuth: []
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emoji
              properties:
                emoji:
                  type: string
                  example: "üëç"
      responses:
        '200':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Dialog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [direct, group, channel]
          example: "direct"
        name:
          type: string
          example: "John & Jane"
        description:
          type: string
          example: "Private conversation"
        avatar_url:
          type: string
          format: uri
        participant_count:
          type: integer
          example: 2
        participants:
          type: array
          items:
            type: string
            format: uuid
        last_message:
          $ref: '#/components/schemas/Message'
        unread_count:
          type: integer
          example: 3
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dialog_id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        content:
          type: string
          example: "Hello, how are you?"
        message_type:
          type: string
          enum: [text, image, video, audio, file, location, sticker, system]
          example: "text"
        metadata:
          type: object
          description: Type-specific metadata
        reply_to_id:
          type: string
          format: uuid
        reactions:
          type: array
          items:
            type: object
            properties:
              emoji:
                type: string
                example: "üëç"
              user_ids:
                type: array
                items:
                  type: string
                  format: uuid
        delivery_status:
          type: string
          enum: [sent, delivered, read]
          example: "delivered"
        read_receipts:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              read_at:
                type: string
                format: date-time
        edited_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        has_next:
          type: boolean
          example: true