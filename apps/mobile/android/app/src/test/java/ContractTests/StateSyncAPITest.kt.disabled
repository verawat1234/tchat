package com.tchat.app.ContractTests

import com.tchat.app.TchatAppTestCase
import com.tchat.app.TestConfiguration
import com.tchat.app.api.StateSyncAPIClient
import com.tchat.app.api.models.*
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Test
import java.time.Instant
import kotlin.test.assertEquals
import kotlin.test.assertFailsWith
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

/**
 * Contract tests for State Synchronization API
 * These tests verify the API contract for cross-platform state management
 */
class StateSyncAPITest : TchatAppTestCase() {

    private lateinit var apiClient: StateSyncAPIClient

    @Before
    fun setUp() {
        apiClient = StateSyncAPIClient(baseURL = TestConfiguration.API_BASE_URL)
    }

    // GET /api/sync/state Tests

    @Test
    fun `getSyncState with valid user returns state`() = runTest {
        // Given
        val userId = TestConfiguration.TestData.VALID_USER_ID
        val platform = "android"

        // When
        val result = apiClient.getSyncState(
            userId = userId,
            platform = platform,
            timestamp = null
        )

        // Then
        assertEquals(userId, result.userId)
        assertEquals(platform, result.platform)
        assertNotNull(result.timestamp)
        assertTrue(result.version > 0)
        assertNotNull(result.preferences)
        assertNotNull(result.navigation)
        assertNotNull(result.workspace)
    }

    @Test
    fun `getSyncState with timestamp returns only changes`() = runTest {
        // Given
        val userId = TestConfiguration.TestData.VALID_USER_ID
        val platform = "android"
        val timestamp = Instant.now().minusSeconds(3600) // 1 hour ago

        // When
        val result = apiClient.getSyncState(
            userId = userId,
            platform = platform,
            timestamp = timestamp
        )

        // Then
        assertEquals(userId, result.userId)
        assertTrue(result.timestamp.isAfter(timestamp))
    }

    @Test
    fun `getSyncState with unauthorized user throws error`() = runTest {
        // Given
        val userId = "unauthorized-user"
        val platform = "android"

        // When & Then
        assertFailsWith<SecurityException> {
            apiClient.getSyncState(
                userId = userId,
                platform = platform,
                timestamp = null
            )
        }
    }

    // POST /api/sync/state Tests

    @Test
    fun `updateSyncState with valid update returns success`() = runTest {
        // Given
        val userId = TestConfiguration.TestData.VALID_USER_ID
        val update = StateSyncUpdate(
            userId = userId,
            platform = "android",
            timestamp = Instant.now(),
            changes = listOf(
                StateChange(
                    path = "preferences.theme",
                    operation = StateChangeOperation.SET,
                    value = "dark",
                    oldValue = "light"
                )
            )
        )

        // When
        val result = apiClient.updateSyncState(update = update)

        // Then
        assertTrue(result.success)
        assertTrue(result.version > 0)
        assertNotNull(result.timestamp)
        assertEquals(0, result.conflicts.size)
    }

    @Test
    fun `updateSyncState with conflicting update handles conflicts`() = runTest {
        // Given
        val userId = TestConfiguration.TestData.VALID_USER_ID
        val update = StateSyncUpdate(
            userId = userId,
            platform = "android",
            timestamp = Instant.now().minusSeconds(3600), // Old timestamp
            changes = listOf(
                StateChange(
                    path = "preferences.theme",
                    operation = StateChangeOperation.SET,
                    value = "dark",
                    oldValue = "light"
                )
            )
        )

        // When & Then
        try {
            val result = apiClient.updateSyncState(update = update)
            // Might succeed with conflicts resolved
            assertNotNull(result.conflicts)
        } catch (e: IllegalStateException) {
            // Conflict exception expected
            assertTrue(e.message?.contains("conflict") == true)
        }
    }

    @Test
    fun `updateSyncState validates state change operations`() = runTest {
        // Given
        val userId = TestConfiguration.TestData.VALID_USER_ID
        val updates = listOf(
            StateSyncUpdate(
                userId = userId,
                platform = "android",
                timestamp = Instant.now(),
                changes = listOf(
                    StateChange(
                        path = "preferences.theme",
                        operation = StateChangeOperation.SET,
                        value = "dark",
                        oldValue = "light"
                    )
                )
            ),
            StateSyncUpdate(
                userId = userId,
                platform = "android",
                timestamp = Instant.now(),
                changes = listOf(
                    StateChange(
                        path = "navigation.tabHistory",
                        operation = StateChangeOperation.APPEND,
                        value = "video",
                        oldValue = null
                    )
                )
            ),
            StateSyncUpdate(
                userId = userId,
                platform = "android",
                timestamp = Instant.now(),
                changes = listOf(
                    StateChange(
                        path = "preferences.oldSetting",
                        operation = StateChangeOperation.DELETE,
                        value = null,
                        oldValue = "deprecated"
                    )
                )
            )
        )

        // When & Then
        updates.forEach { update ->
            val result = apiClient.updateSyncState(update = update)
            assertTrue(result.success)
        }
    }

    // POST /api/sync/notifications Tests

    @Test
    fun `syncNotificationPreferences with valid preferences returns success`() = runTest {
        // Given
        val preferences = NotificationPreferences(
            chat = true,
            store = false,
            social = true,
            video = true,
            workspace = false,
            marketing = false,
            quietHours = QuietHours(
                enabled = true,
                startTime = "22:00",
                endTime = "08:00",
                timezone = "America/New_York"
            )
        )

        // When
        val result = apiClient.syncNotificationPreferences(preferences = preferences)

        // Then
        // Success expected - no exception thrown
        assertNotNull(result)
    }

    @Test
    fun `syncNotificationPreferences validates quiet hours format`() = runTest {
        // Given
        val preferences = NotificationPreferences(
            chat = true,
            store = true,
            social = true,
            video = true,
            workspace = true,
            marketing = false,
            quietHours = QuietHours(
                enabled = true,
                startTime = "invalid-time",
                endTime = "08:00",
                timezone = "America/New_York"
            )
        )

        // When & Then
        assertFailsWith<IllegalArgumentException> {
            apiClient.syncNotificationPreferences(preferences = preferences)
        }
    }

    // POST /api/sync/workspace Tests

    @Test
    fun `switchWorkspace with valid workspace returns workspace state`() = runTest {
        // Given
        val workspaceId = TestConfiguration.TestData.VALID_WORKSPACE_ID
        val platform = "android"

        // When
        val result = apiClient.switchWorkspace(
            workspaceId = workspaceId,
            platform = platform
        )

        // Then
        assertEquals(workspaceId, result.currentWorkspaceId)
        assertTrue(result.availableWorkspaces.isNotEmpty())
        assertNotNull(result.role)

        // Validate workspace info structure
        result.availableWorkspaces.forEach { workspace ->
            assertTrue(workspace.id.isNotEmpty())
            assertTrue(workspace.name.isNotEmpty())
            assertNotNull(workspace.type)
            assertTrue(workspace.unreadCount >= 0)
        }
    }

    @Test
    fun `switchWorkspace with invalid workspace throws error`() = runTest {
        // Given
        val workspaceId = "invalid-workspace-id"
        val platform = "android"

        // When & Then
        assertFailsWith<NoSuchElementException> {
            apiClient.switchWorkspace(
                workspaceId = workspaceId,
                platform = platform
            )
        }
    }

    @Test
    fun `switchWorkspace validates workspace types`() = runTest {
        // Given
        val workspaceId = TestConfiguration.TestData.VALID_WORKSPACE_ID
        val platform = "android"

        // When
        val result = apiClient.switchWorkspace(
            workspaceId = workspaceId,
            platform = platform
        )

        // Then
        val validTypes = setOf("personal", "business", "team")
        result.availableWorkspaces.forEach { workspace ->
            assertTrue(workspace.type.lowercase() in validTypes)
        }
    }

    // Validation Tests

    @Test
    fun `getSyncState validates user preferences structure`() = runTest {
        // Given
        val userId = TestConfiguration.TestData.VALID_USER_ID
        val platform = "android"

        // When
        val result = apiClient.getSyncState(
            userId = userId,
            platform = platform,
            timestamp = null
        )

        // Then
        val preferences = result.preferences
        assertNotNull(preferences.theme)
        assertNotNull(preferences.language)
        assertNotNull(preferences.notifications)
        assertNotNull(preferences.accessibility)

        // Validate theme values
        val validThemes = setOf("light", "dark", "auto")
        assertTrue(preferences.theme.lowercase() in validThemes)

        // Validate accessibility preferences
        val accessibility = preferences.accessibility
        assertNotNull(accessibility.reducedMotion)
        assertNotNull(accessibility.highContrast)
        assertNotNull(accessibility.largerText)
        assertNotNull(accessibility.screenReader)
    }

    @Test
    fun `getSyncState validates navigation state structure`() = runTest {
        // Given
        val userId = TestConfiguration.TestData.VALID_USER_ID
        val platform = "android"

        // When
        val result = apiClient.getSyncState(
            userId = userId,
            platform = platform,
            timestamp = null
        )

        // Then
        val navigation = result.navigation
        assertNotNull(navigation.currentTab)
        assertNotNull(navigation.tabHistory)
        assertNotNull(navigation.chatContext)
        assertNotNull(navigation.storeContext)

        // Validate current tab value
        val validTabs = setOf("chat", "store", "social", "video", "more")
        assertTrue(navigation.currentTab.lowercase() in validTabs)
    }
}