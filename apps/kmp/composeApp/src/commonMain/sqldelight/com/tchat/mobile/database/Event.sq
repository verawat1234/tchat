-- Events table for social events
CREATE TABLE IF NOT EXISTS events (
    id TEXT PRIMARY KEY NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    event_date INTEGER NOT NULL,
    location TEXT NOT NULL,
    price TEXT NOT NULL DEFAULT 'Free',
    image_url TEXT DEFAULT '',
    category TEXT NOT NULL,
    organizer_id TEXT NOT NULL,
    attendees_count INTEGER NOT NULL DEFAULT 0,
    max_attendees INTEGER,
    is_public INTEGER NOT NULL DEFAULT 1,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (organizer_id) REFERENCES users(id)
);

-- Event attendees tracking
CREATE TABLE IF NOT EXISTS event_attendees (
    id TEXT PRIMARY KEY NOT NULL,
    event_id TEXT NOT NULL,
    user_id TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'attending', -- attending, maybe, not_attending
    rsvp_date INTEGER NOT NULL,
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE(event_id, user_id)
);

-- Event categories for browsing
CREATE TABLE IF NOT EXISTS event_categories (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL UNIQUE,
    description TEXT DEFAULT '',
    icon TEXT DEFAULT '',
    color TEXT DEFAULT '#3B82F6',
    event_count INTEGER NOT NULL DEFAULT 0,
    is_featured INTEGER NOT NULL DEFAULT 0,
    sort_order INTEGER NOT NULL DEFAULT 0,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL
);

-- Event posts (social posts related to events)
CREATE TABLE IF NOT EXISTS event_posts (
    id TEXT PRIMARY KEY NOT NULL,
    event_id TEXT NOT NULL,
    author_id TEXT NOT NULL,
    content TEXT NOT NULL,
    image_url TEXT DEFAULT '',
    post_type TEXT NOT NULL DEFAULT 'text', -- text, image, video, live
    likes_count INTEGER NOT NULL DEFAULT 0,
    comments_count INTEGER NOT NULL DEFAULT 0,
    shares_count INTEGER NOT NULL DEFAULT 0,
    is_pinned INTEGER NOT NULL DEFAULT 0,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (author_id) REFERENCES users(id)
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS events_event_date_idx ON events(event_date);
CREATE INDEX IF NOT EXISTS events_category_idx ON events(category);
CREATE INDEX IF NOT EXISTS events_organizer_id_idx ON events(organizer_id);
CREATE INDEX IF NOT EXISTS events_is_public_idx ON events(is_public);
CREATE INDEX IF NOT EXISTS event_attendees_event_id_idx ON event_attendees(event_id);
CREATE INDEX IF NOT EXISTS event_attendees_user_id_idx ON event_attendees(user_id);
CREATE INDEX IF NOT EXISTS event_categories_featured_idx ON event_categories(is_featured, sort_order);
CREATE INDEX IF NOT EXISTS event_categories_count_idx ON event_categories(event_count);
CREATE INDEX IF NOT EXISTS event_posts_event_id_idx ON event_posts(event_id);
CREATE INDEX IF NOT EXISTS event_posts_author_id_idx ON event_posts(author_id);
CREATE INDEX IF NOT EXISTS event_posts_created_at_idx ON event_posts(created_at);
CREATE INDEX IF NOT EXISTS event_posts_pinned_idx ON event_posts(is_pinned, created_at);

-- Queries
getAllEvents:
SELECT
    e.*,
    up.display_name AS organizer_name,
    up.username AS organizer_username,
    up.avatar_url AS organizer_avatar,
    CASE WHEN ea.user_id IS NOT NULL THEN ea.status ELSE NULL END AS user_attendance_status,
    COUNT(ea2.id) AS actual_attendees_count
FROM events e
LEFT JOIN user_profiles up ON e.organizer_id = up.user_id
LEFT JOIN event_attendees ea ON e.id = ea.event_id AND ea.user_id = ?
LEFT JOIN event_attendees ea2 ON e.id = ea2.event_id AND ea2.status = 'attending'
WHERE e.is_public = 1
GROUP BY e.id
ORDER BY e.event_date ASC;

getUpcomingEvents:
SELECT
    e.*,
    up.display_name AS organizer_name,
    up.username AS organizer_username,
    up.avatar_url AS organizer_avatar,
    CASE WHEN ea.user_id IS NOT NULL THEN ea.status ELSE NULL END AS user_attendance_status,
    COUNT(ea2.id) AS actual_attendees_count
FROM events e
LEFT JOIN user_profiles up ON e.organizer_id = up.user_id
LEFT JOIN event_attendees ea ON e.id = ea.event_id AND ea.user_id = ?
LEFT JOIN event_attendees ea2 ON e.id = ea2.event_id AND ea2.status = 'attending'
WHERE e.is_public = 1 AND e.event_date > ?
GROUP BY e.id
ORDER BY e.event_date ASC;

getEventsByCategory:
SELECT
    e.*,
    up.display_name AS organizer_name,
    up.username AS organizer_username,
    up.avatar_url AS organizer_avatar,
    CASE WHEN ea.user_id IS NOT NULL THEN ea.status ELSE NULL END AS user_attendance_status,
    COUNT(ea2.id) AS actual_attendees_count
FROM events e
LEFT JOIN user_profiles up ON e.organizer_id = up.user_id
LEFT JOIN event_attendees ea ON e.id = ea.event_id AND ea.user_id = ?
LEFT JOIN event_attendees ea2 ON e.id = ea2.event_id AND ea2.status = 'attending'
WHERE e.category = ? AND e.is_public = 1
GROUP BY e.id
ORDER BY e.event_date ASC;

getEventById:
SELECT
    e.*,
    up.display_name AS organizer_name,
    up.username AS organizer_username,
    up.avatar_url AS organizer_avatar,
    CASE WHEN ea.user_id IS NOT NULL THEN ea.status ELSE NULL END AS user_attendance_status,
    COUNT(ea2.id) AS actual_attendees_count
FROM events e
LEFT JOIN user_profiles up ON e.organizer_id = up.user_id
LEFT JOIN event_attendees ea ON e.id = ea.event_id AND ea.user_id = ?
LEFT JOIN event_attendees ea2 ON e.id = ea2.event_id AND ea2.status = 'attending'
WHERE e.id = ?
GROUP BY e.id;

getUserEvents:
SELECT
    e.*,
    up.display_name AS organizer_name,
    up.username AS organizer_username,
    up.avatar_url AS organizer_avatar,
    ea.status AS user_attendance_status,
    COUNT(ea2.id) AS actual_attendees_count
FROM events e
JOIN event_attendees ea ON e.id = ea.event_id AND ea.user_id = ?
LEFT JOIN user_profiles up ON e.organizer_id = up.user_id
LEFT JOIN event_attendees ea2 ON e.id = ea2.event_id AND ea2.status = 'attending'
GROUP BY e.id
ORDER BY e.event_date ASC;

getEventAttendees:
SELECT
    ea.*,
    up.display_name,
    up.username,
    up.avatar_url,
    up.is_verified
FROM event_attendees ea
JOIN user_profiles up ON ea.user_id = up.user_id
WHERE ea.event_id = ? AND ea.status = 'attending'
ORDER BY ea.rsvp_date ASC;

insertEvent:
INSERT INTO events
(id, title, description, event_date, location, price, image_url, category, organizer_id, attendees_count, max_attendees, is_public, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateEvent:
UPDATE events
SET title = ?, description = ?, event_date = ?, location = ?, price = ?, image_url = ?, category = ?, max_attendees = ?, is_public = ?, updated_at = ?
WHERE id = ? AND organizer_id = ?;

deleteEvent:
DELETE FROM events WHERE id = ? AND organizer_id = ?;

rsvpToEvent:
INSERT OR REPLACE INTO event_attendees (id, event_id, user_id, status, rsvp_date)
VALUES (?, ?, ?, ?, ?);

removeRsvp:
DELETE FROM event_attendees WHERE event_id = ? AND user_id = ?;

updateAttendeesCount:
UPDATE events SET attendees_count = (
    SELECT COUNT(*) FROM event_attendees WHERE event_id = ? AND status = 'attending'
) WHERE id = ?;

-- Category queries
getAllEventCategories:
SELECT * FROM event_categories
ORDER BY is_featured DESC, sort_order ASC, event_count DESC;

getFeaturedEventCategories:
SELECT * FROM event_categories
WHERE is_featured = 1
ORDER BY sort_order ASC;

getEventCategoriesWithCounts:
SELECT
    ec.*,
    COALESCE(e.live_count, 0) AS live_event_count
FROM event_categories ec
LEFT JOIN (
    SELECT category, COUNT(*) AS live_count
    FROM events
    WHERE is_public = 1 AND event_date > ?
    GROUP BY category
) e ON ec.name = e.category
ORDER BY ec.is_featured DESC, ec.sort_order ASC, live_event_count DESC;

getEventCategories:
SELECT DISTINCT category, COUNT(*) AS event_count
FROM events
WHERE is_public = 1 AND event_date > ?
GROUP BY category
ORDER BY event_count DESC;

searchEvents:
SELECT
    e.*,
    up.display_name AS organizer_name,
    up.username AS organizer_username,
    up.avatar_url AS organizer_avatar,
    CASE WHEN ea.user_id IS NOT NULL THEN ea.status ELSE NULL END AS user_attendance_status,
    COUNT(ea2.id) AS actual_attendees_count
FROM events e
LEFT JOIN user_profiles up ON e.organizer_id = up.user_id
LEFT JOIN event_attendees ea ON e.id = ea.event_id AND ea.user_id = ?
LEFT JOIN event_attendees ea2 ON e.id = ea2.event_id AND ea2.status = 'attending'
WHERE e.is_public = 1
    AND (e.title LIKE '%' || ? || '%'
         OR e.description LIKE '%' || ? || '%'
         OR e.location LIKE '%' || ? || '%')
GROUP BY e.id
ORDER BY e.event_date ASC;

-- Event Posts queries
getEventPosts:
SELECT
    ep.*,
    up.display_name AS author_name,
    up.username AS author_username,
    up.avatar_url AS author_avatar,
    up.is_verified AS author_verified
FROM event_posts ep
JOIN user_profiles up ON ep.author_id = up.user_id
WHERE ep.event_id = ?
ORDER BY ep.is_pinned DESC, ep.created_at DESC;

getAllEventPosts:
SELECT
    ep.*,
    up.display_name AS author_name,
    up.username AS author_username,
    up.avatar_url AS author_avatar,
    up.is_verified AS author_verified,
    e.title AS event_title,
    e.category AS event_category
FROM event_posts ep
JOIN user_profiles up ON ep.author_id = up.user_id
JOIN events e ON ep.event_id = e.id
WHERE e.is_public = 1
ORDER BY ep.created_at DESC;

getEventPostById:
SELECT
    ep.*,
    up.display_name AS author_name,
    up.username AS author_username,
    up.avatar_url AS author_avatar,
    up.is_verified AS author_verified
FROM event_posts ep
JOIN user_profiles up ON ep.author_id = up.user_id
WHERE ep.id = ?;

getPinnedEventPosts:
SELECT
    ep.*,
    up.display_name AS author_name,
    up.username AS author_username,
    up.avatar_url AS author_avatar,
    up.is_verified AS author_verified,
    e.title AS event_title
FROM event_posts ep
JOIN user_profiles up ON ep.author_id = up.user_id
JOIN events e ON ep.event_id = e.id
WHERE ep.is_pinned = 1 AND e.is_public = 1
ORDER BY ep.created_at DESC;

-- Category CRUD
insertEventCategory:
INSERT INTO event_categories
(id, name, description, icon, color, event_count, is_featured, sort_order, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateEventCategory:
UPDATE event_categories
SET name = ?, description = ?, icon = ?, color = ?, is_featured = ?, sort_order = ?, updated_at = ?
WHERE id = ?;

updateCategoryEventCount:
UPDATE event_categories
SET event_count = (
    SELECT COUNT(*) FROM events WHERE category = ? AND is_public = 1
), updated_at = ?
WHERE name = ?;

deleteEventCategory:
DELETE FROM event_categories WHERE id = ?;

-- Event Posts CRUD
insertEventPost:
INSERT INTO event_posts
(id, event_id, author_id, content, image_url, post_type, likes_count, comments_count, shares_count, is_pinned, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateEventPost:
UPDATE event_posts
SET content = ?, image_url = ?, post_type = ?, is_pinned = ?, updated_at = ?
WHERE id = ? AND author_id = ?;

updateEventPostStats:
UPDATE event_posts
SET likes_count = ?, comments_count = ?, shares_count = ?, updated_at = ?
WHERE id = ?;

deleteEventPost:
DELETE FROM event_posts WHERE id = ? AND author_id = ?;

-- Seed data insertion queries
seedEventCategories:
INSERT OR REPLACE INTO event_categories
(id, name, description, icon, color, event_count, is_featured, sort_order, created_at, updated_at)
VALUES
    ('cat_music', 'Music', 'Live music events, concerts, and festivals', '🎵', '#E91E63', 15, 1, 1, ?, ?),
    ('cat_food', 'Food', 'Food festivals, cooking classes, and culinary events', '🍽️', '#FF9800', 23, 1, 2, ?, ?),
    ('cat_tech', 'Technology', 'Tech conferences, workshops, and networking events', '💻', '#2196F3', 8, 1, 3, ?, ?),
    ('cat_art', 'Arts & Culture', 'Art exhibitions, cultural festivals, and creative workshops', '🎨', '#9C27B0', 12, 1, 4, ?, ?),
    ('cat_sport', 'Sports', 'Sports events, fitness classes, and outdoor activities', '⚽', '#4CAF50', 18, 0, 5, ?, ?),
    ('cat_business', 'Business', 'Business conferences, networking, and professional development', '💼', '#607D8B', 6, 0, 6, ?, ?),
    ('cat_education', 'Education', 'Educational workshops, seminars, and learning events', '📚', '#795548', 9, 0, 7, ?, ?),
    ('cat_health', 'Health & Wellness', 'Wellness events, yoga classes, and health seminars', '🧘', '#8BC34A', 11, 0, 8, ?, ?);

seedEventPosts:
INSERT OR REPLACE INTO event_posts
(id, event_id, author_id, content, image_url, post_type, likes_count, comments_count, shares_count, is_pinned, created_at, updated_at)
VALUES
    ('post_1', 'event1', 'user1', 'So excited for this music festival! Who else is going? 🎸🎤', 'https://picsum.photos/400/300?random=1', 'text', 24, 8, 3, 1, ?, ?),
    ('post_2', 'event1', 'user2', 'Just bought my tickets! Cannot wait to see the lineup 🎶', '', 'text', 15, 4, 1, 0, ?, ?),
    ('post_3', 'event2', 'user3', 'Amazing speakers lined up for Tech Conference 2024! #TechConf2024', 'https://picsum.photos/400/300?random=2', 'image', 42, 12, 7, 1, ?, ?),
    ('post_4', 'event3', 'user4', 'The food at this festival is going to be incredible! 🥘🍜', 'https://picsum.photos/400/300?random=3', 'image', 18, 6, 2, 0, ?, ?),
    ('post_5', 'event4', 'user1', 'Contemporary art meets traditional culture - this exhibition is a must-see!', '', 'text', 31, 9, 4, 1, ?, ?),
    ('post_6', 'event1', 'user5', 'Last year was amazing, this year will be even better! 🔥', '', 'text', 22, 5, 2, 0, ?, ?),
    ('post_7', 'event2', 'user6', 'Keynote by industry leaders - do not miss it!', 'https://picsum.photos/400/300?random=4', 'image', 28, 7, 3, 0, ?, ?),
    ('post_8', 'event3', 'user7', 'Street food from all over Southeast Asia! 🇹🇭🇸🇬🇮🇩', 'https://picsum.photos/400/300?random=5', 'image', 35, 11, 8, 1, ?, ?);