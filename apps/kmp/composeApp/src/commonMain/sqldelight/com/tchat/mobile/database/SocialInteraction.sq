-- Note: Table definitions are in SocialProfile.sq to avoid conflicts
-- This file contains only queries for social interactions and comments

-- Note: Indexes are already defined in SocialProfile.sq to avoid duplicates

-- Queries for interactions
getInteractionsByUser:
SELECT * FROM social_interactions
WHERE user_id = ?
ORDER BY created_at DESC;

getInteractionsByTarget:
SELECT
    si.*,
    sp.display_name,
    sp.username,
    sp.avatar
FROM social_interactions si
JOIN social_profiles sp ON si.user_id = sp.id
WHERE si.target_id = ? AND si.target_type = ?
ORDER BY si.created_at DESC;

getInteractionState:
SELECT interaction_type FROM social_interactions
WHERE user_id = ? AND target_id = ? AND target_type = ? AND interaction_type = ?;

getInteractionCounts:
SELECT
    interaction_type,
    COUNT(*) AS interaction_count
FROM social_interactions
WHERE target_id = ? AND target_type = ?
GROUP BY interaction_type;

getUserInteractionState:
SELECT interaction_type
FROM social_interactions
WHERE user_id = ? AND target_id = ? AND target_type = ?;

insertInteraction:
INSERT OR REPLACE INTO social_interactions
(id, user_id, target_id, target_type, interaction_type, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?);

removeInteraction:
DELETE FROM social_interactions
WHERE user_id = ? AND target_id = ? AND target_type = ? AND interaction_type = ?;

getFollowedUsers:
SELECT
    si.target_id AS followed_user_id,
    sp.display_name,
    sp.username,
    sp.avatar,
    sp.is_social_verified AS is_verified,
    si.created_at AS followed_at
FROM social_interactions si
JOIN social_profiles sp ON si.target_id = sp.id
WHERE si.user_id = ? AND si.interaction_type = 'follow'
ORDER BY si.created_at DESC;

getFollowers:
SELECT
    si.user_id AS follower_user_id,
    sp.display_name,
    sp.username,
    sp.avatar,
    sp.is_social_verified AS is_verified,
    si.created_at AS followed_at
FROM social_interactions si
JOIN social_profiles sp ON si.user_id = sp.id
WHERE si.target_id = ? AND si.interaction_type = 'follow'
ORDER BY si.created_at DESC;

getUserStats:
SELECT
    (SELECT COUNT(*) FROM social_interactions WHERE target_id = ? AND interaction_type = 'follow') AS followers_count,
    (SELECT COUNT(*) FROM social_interactions WHERE user_id = ? AND interaction_type = 'follow') AS following_count,
    (SELECT COUNT(*) FROM social_interactions WHERE target_id = ? AND target_type = 'post' AND interaction_type = 'like') AS total_likes_received;

-- Queries for comments
getCommentsByTarget:
SELECT
    sc.*,
    sp.display_name,
    sp.username,
    sp.avatar,
    sp.is_social_verified AS is_verified,
    CASE WHEN si.user_id IS NOT NULL THEN 1 ELSE 0 END AS is_liked_by_user
FROM social_comments sc
JOIN social_profiles sp ON sc.author_id = sp.id
LEFT JOIN social_interactions si ON sc.id = si.target_id
    AND si.target_type = 'comment'
    AND si.interaction_type = 'like'
    AND si.user_id = ?
WHERE sc.post_id = ? AND sc.parent_comment_id IS NULL
ORDER BY sc.created_at ASC;

getCommentReplies:
SELECT
    sc.*,
    sp.display_name,
    sp.username,
    sp.avatar,
    sp.is_social_verified AS is_verified,
    CASE WHEN si.user_id IS NOT NULL THEN 1 ELSE 0 END AS is_liked_by_user
FROM social_comments sc
JOIN social_profiles sp ON sc.author_id = sp.id
LEFT JOIN social_interactions si ON sc.id = si.target_id
    AND si.target_type = 'comment'
    AND si.interaction_type = 'like'
    AND si.user_id = ?
WHERE sc.parent_comment_id = ?
ORDER BY sc.created_at ASC;

insertComment:
INSERT INTO social_comments
(id, post_id, author_id, author_username, content, parent_comment_id, likes_count, replies_count, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, 0, 0, ?, ?);

updateComment:
UPDATE social_comments
SET content = ?, updated_at = ?
WHERE id = ? AND author_id = ?;

deleteComment:
DELETE FROM social_comments
WHERE id = ? AND author_id = ?;

updateCommentLikesCount:
UPDATE social_comments SET likes_count = (
    SELECT COUNT(*) FROM social_interactions
    WHERE target_id = ? AND target_type = 'comment' AND interaction_type = 'like'
) WHERE id = ?;

updateCommentRepliesCount:
UPDATE social_comments SET replies_count = (
    SELECT COUNT(*) FROM social_comments WHERE parent_comment_id = ?
) WHERE id = ?;

getPopularContent:
SELECT
    target_id,
    target_type,
    COUNT(*) AS interaction_count,
    interaction_type
FROM social_interactions
WHERE created_at > ? AND interaction_type IN ('like', 'share', 'view')
GROUP BY target_id, target_type, interaction_type
HAVING interaction_count > ?
ORDER BY interaction_count DESC;

getRecentActivity:
SELECT
    si.*,
    sp.display_name,
    sp.username,
    sp.avatar
FROM social_interactions si
JOIN social_profiles sp ON si.user_id = sp.id
WHERE si.user_id IN (
    SELECT target_id FROM social_interactions
    WHERE user_id = ? AND interaction_type = 'follow'
)
AND si.created_at > ?
ORDER BY si.created_at DESC
LIMIT ?;