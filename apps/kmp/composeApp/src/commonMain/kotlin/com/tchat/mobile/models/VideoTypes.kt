package com.tchat.mobile.models

import kotlinx.datetime.Clock
import kotlinx.datetime.Instant

/**
 * Video Content Types - Following YouTube/TikTok Patterns
 * Based on web VideoTab.tsx implementation
 */

// Core Video Content Types
enum class VideoType {
    SHORT,  // TikTok-style vertical videos (≤60s)
    LONG    // YouTube-style horizontal videos (>60s)
}

enum class VideoCategory {
    ALL,
    TRENDING,
    FOOD,
    MUSIC,
    ENTERTAINMENT,
    EDUCATION,
    TRAVEL,
    BUSINESS,
    GAMING,
    TECH,
    LIFESTYLE,
    SPORTS,
    NEWS
}

enum class VideoQuality {
    AUTO,
    QUALITY_144P,
    QUALITY_240P,
    QUALITY_360P,
    QUALITY_480P,
    QUALITY_720P,
    QUALITY_1080P,
    QUALITY_1440P,
    QUALITY_2160P // 4K
}

// Video Content Models
data class VideoContent(
    val id: String,
    val title: String,
    val description: String,
    val thumbnail: String,
    val videoUrl: String?,
    val duration: String, // Format: "MM:SS" or "HH:MM:SS"
    val durationSeconds: Int,
    val views: Long,
    val likes: Long,
    val dislikes: Long,
    val comments: Long,
    val shares: Long,
    val bookmarks: Long,
    val channel: ChannelInfo,
    val uploadTime: Instant,
    val uploadTimeFormatted: String, // "2 hours ago", "1 day ago"
    val isLive: Boolean = false,
    val isPrivate: Boolean = false,
    val isPremium: Boolean = false,
    val category: VideoCategory,
    val tags: List<String>,
    val type: VideoType,
    val language: String = "en",
    val subtitles: List<SubtitleTrack> = emptyList(),
    val qualities: List<VideoQuality> = listOf(VideoQuality.AUTO),
    val ageRestricted: Boolean = false,
    val monetized: Boolean = false,
    val sponsoredSegments: List<SponsoredSegment> = emptyList()
)

data class ChannelInfo(
    val id: String,
    val name: String,
    val avatar: String,
    val banner: String? = null,
    val description: String,
    val subscribers: Long,
    val totalVideos: Int,
    val verified: Boolean,
    val category: VideoCategory,
    val joinedDate: String, // "Jan 2020"
    val location: String? = null,
    val isSubscribed: Boolean = false,
    val notificationsEnabled: Boolean = false,
    val website: String? = null,
    val socialLinks: Map<String, String> = emptyMap() // "twitter" -> "url"
)

data class SubtitleTrack(
    val language: String,
    val languageCode: String, // "en", "th", "zh"
    val url: String,
    val autoGenerated: Boolean = false
)

data class SponsoredSegment(
    val startTime: Int, // seconds
    val endTime: Int,   // seconds
    val type: SponsorType,
    val title: String? = null
)

enum class SponsorType {
    SPONSOR,
    SELF_PROMO,
    INTERACTION,
    INTRO,
    OUTRO,
    PREVIEW,
    MUSIC_OFFTOPIC,
    FILLER
}

// Engagement & Interaction Models
data class VideoEngagement(
    val videoId: String,
    val isLiked: Boolean = false,
    val isDisliked: Boolean = false,
    val isBookmarked: Boolean = false,
    val watchTime: Int = 0, // seconds watched
    val watchPercentage: Float = 0f, // 0.0 to 1.0
    val lastWatchPosition: Int = 0, // seconds
    val reactions: List<VideoReaction> = emptyList(),
    val sharedTo: List<String> = emptyList(), // platform names
    val reportReason: String? = null
)

data class VideoReaction(
    val type: ReactionType,
    val timestamp: Int, // seconds in video
    val intensity: Float = 1f // 0.0 to 1.0
)

// ReactionType already defined in PostTypes.kt

// Comment System Models
data class VideoComment(
    val id: String,
    val videoId: String,
    val userId: String,
    val userAvatar: String,
    val username: String,
    val displayName: String?,
    val isVerified: Boolean = false,
    val content: String,
    val timestamp: Instant,
    val timeFormatted: String, // "2 hours ago"
    val likes: Long = 0,
    val dislikes: Long = 0,
    val replies: List<VideoComment> = emptyList(),
    val isEdited: Boolean = false,
    val isPinned: Boolean = false,
    val isHeartedByCreator: Boolean = false,
    val mentionedUsers: List<String> = emptyList(),
    val isReply: Boolean = false,
    val parentCommentId: String? = null
)

// Playlist & Collection Models
data class VideoPlaylist(
    val id: String,
    val title: String,
    val description: String,
    val thumbnail: String, // First video thumbnail or custom
    val creatorId: String,
    val creatorName: String,
    val videoIds: List<String>,
    val videoCount: Int,
    val totalDuration: String, // "1:23:45"
    val isPrivate: Boolean = false,
    val isCollaborative: Boolean = false,
    val createdAt: Instant,
    val updatedAt: Instant,
    val views: Long = 0,
    val category: VideoCategory = VideoCategory.ALL
)

data class WatchHistory(
    val userId: String,
    val videoId: String,
    val watchedAt: Instant,
    val watchDuration: Int, // seconds
    val watchPercentage: Float,
    val deviceType: String, // "mobile", "web", "tv"
    val quality: VideoQuality
)

// Subscription & Channel Models
data class ChannelSubscription(
    val userId: String,
    val channelId: String,
    val subscribedAt: Instant,
    val notificationsEnabled: Boolean = true,
    val bellIconEnabled: Boolean = false // "All" notifications vs "Personalized"
)

data class ChannelMembership(
    val userId: String,
    val channelId: String,
    val tier: MembershipTier,
    val joinedAt: Instant,
    val renewsAt: Instant?,
    val perks: List<MembershipPerk>
)

enum class MembershipTier {
    FREE,
    BRONZE,
    SILVER,
    GOLD,
    PLATINUM
}

data class MembershipPerk(
    val id: String,
    val title: String,
    val description: String,
    val type: PerkType
)

enum class PerkType {
    EARLY_ACCESS,
    EXCLUSIVE_CONTENT,
    CUSTOM_EMOJI,
    BADGE,
    COMMUNITY_ACCESS,
    LIVE_CHAT_PERKS,
    DISCORD_ACCESS
}

// Live Streaming Models
data class LiveStream(
    val id: String,
    val title: String,
    val description: String,
    val thumbnail: String,
    val streamUrl: String,
    val chatUrl: String?,
    val channelId: String,
    val startedAt: Instant,
    val scheduledFor: Instant?,
    val currentViewers: Long,
    val peakViewers: Long,
    val totalViews: Long,
    val status: LiveStreamStatus,
    val category: VideoCategory,
    val tags: List<String>,
    val isPrivate: Boolean = false,
    val isPremium: Boolean = false,
    val ageRestricted: Boolean = false,
    val chatEnabled: Boolean = true,
    val chatSlowMode: Int = 0, // seconds between messages
    val subscribersOnly: Boolean = false,
    val followersOnly: Boolean = false
)

enum class LiveStreamStatus {
    SCHEDULED,
    LIVE,
    ENDED,
    CANCELLED
}

data class LiveChatMessage(
    val id: String,
    val streamId: String,
    val userId: String,
    val username: String,
    val displayName: String?,
    val userAvatar: String,
    val isVerified: Boolean = false,
    val isModerator: Boolean = false,
    val isSubscriber: Boolean = false,
    val isMember: Boolean = false,
    val memberTier: MembershipTier? = null,
    val message: String,
    val timestamp: Instant,
    val isSuperchat: Boolean = false,
    val superchatAmount: Double? = null,
    val superchatCurrency: String? = null,
    val emotes: List<ChatEmote> = emptyList(),
    val mentionedUsers: List<String> = emptyList()
)

data class ChatEmote(
    val name: String,
    val url: String,
    val startIndex: Int,
    val endIndex: Int
)

// Analytics & Metrics Models
data class VideoAnalytics(
    val videoId: String,
    val views: Long,
    val uniqueViewers: Long,
    val watchTime: Long, // total seconds watched
    val averageViewDuration: Double,
    val likes: Long,
    val dislikes: Long,
    val comments: Long,
    val shares: Long,
    val subscribersGained: Long,
    val subscribersLost: Long,
    val clickThroughRate: Float, // thumbnail CTR
    val retentionRate: Float, // average % watched
    val engagementRate: Float,
    val audienceRetention: List<RetentionPoint>,
    val trafficSources: Map<String, Long>, // "search" -> views
    val demographics: AudienceDemographics,
    val revenueData: RevenueData?
)

data class RetentionPoint(
    val timeSeconds: Int,
    val retentionPercentage: Float // 0.0 to 1.0
)

data class AudienceDemographics(
    val ageGroups: Map<String, Float>, // "18-24" -> 0.35
    val genders: Map<String, Float>, // "male" -> 0.6
    val countries: Map<String, Float>, // "TH" -> 0.8
    val devices: Map<String, Float> // "mobile" -> 0.7
)

data class RevenueData(
    val totalRevenue: Double,
    val currency: String,
    val adRevenue: Double,
    val membershipRevenue: Double,
    val superchatRevenue: Double,
    val merchandiseRevenue: Double
)

// Search & Discovery Models
data class VideoSearchResult(
    val videos: List<VideoContent>,
    val channels: List<ChannelInfo>,
    val playlists: List<VideoPlaylist>,
    val totalResults: Long,
    val searchQuery: String,
    val filters: SearchFilters,
    val suggestions: List<String>
)

data class SearchFilters(
    val type: SearchType = SearchType.ALL,
    val uploadDate: UploadDateFilter = UploadDateFilter.ANY,
    val duration: DurationFilter = DurationFilter.ANY,
    val features: List<VideoFeature> = emptyList(),
    val sortBy: SortBy = SortBy.RELEVANCE
)

enum class SearchType {
    ALL,
    VIDEOS,
    CHANNELS,
    PLAYLISTS,
    LIVE
}

enum class UploadDateFilter {
    ANY,
    LAST_HOUR,
    TODAY,
    THIS_WEEK,
    THIS_MONTH,
    THIS_YEAR
}

enum class DurationFilter {
    ANY,
    SHORT, // < 4 minutes
    MEDIUM, // 4-20 minutes
    LONG // > 20 minutes
}

enum class VideoFeature {
    LIVE,
    HD,
    SUBTITLES,
    CREATIVE_COMMONS,
    THREE_SIXTY,
    VR,
    HDR
}

enum class SortBy {
    RELEVANCE,
    UPLOAD_DATE,
    VIEW_COUNT,
    RATING
}

// Mock Data Generators
object VideoMockData {
    fun generateShortVideos(): List<VideoContent> {
        return listOf(
            VideoContent(
                id = "short-1",
                title = "Amazing Pad Thai Street Food",
                description = "Learn how to make authentic Pad Thai in 60 seconds! 🍜✨ #StreetFood #Thai #Cooking",
                thumbnail = "https://images.unsplash.com/photo-1559847844-5315695b6a77?w=400&h=700&fit=crop",
                videoUrl = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                duration = "0:45",
                durationSeconds = 45,
                views = 128000,
                likes = 8500,
                dislikes = 120,
                comments = 247,
                shares = 1200,
                bookmarks = 890,
                channel = generateChannel("thai-chef"),
                uploadTime = Clock.System.now(),
                uploadTimeFormatted = "2 hours ago",
                category = VideoCategory.FOOD,
                tags = listOf("food", "thai", "cooking", "street"),
                type = VideoType.SHORT
            ),
            VideoContent(
                id = "short-2",
                title = "Thai Dance Challenge",
                description = "Traditional Thai dance moves gone viral! Try this at home 💃 #ThaiDance #Culture #Challenge",
                thumbnail = "https://images.unsplash.com/photo-1518611012118-696072aa579a?w=400&h=700&fit=crop",
                videoUrl = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4",
                duration = "0:30",
                durationSeconds = 30,
                views = 245000,
                likes = 15200,
                dislikes = 95,
                comments = 832,
                shares = 2100,
                bookmarks = 1450,
                channel = generateChannel("thai-culture"),
                uploadTime = Clock.System.now(),
                uploadTimeFormatted = "4 hours ago",
                category = VideoCategory.ENTERTAINMENT,
                tags = listOf("dance", "culture", "traditional", "viral"),
                type = VideoType.SHORT
            ),
            VideoContent(
                id = "short-3",
                title = "Bangkok Night Market Tour",
                description = "Best night market finds under 100 baht! 🌃🛍️ #Bangkok #Market #Shopping",
                thumbnail = "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=700&fit=crop",
                videoUrl = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4",
                duration = "1:20",
                durationSeconds = 80,
                views = 67000,
                likes = 4300,
                dislikes = 45,
                comments = 156,
                shares = 890,
                bookmarks = 523,
                channel = generateChannel("bangkok-explorer"),
                uploadTime = Clock.System.now(),
                uploadTimeFormatted = "6 hours ago",
                category = VideoCategory.TRAVEL,
                tags = listOf("bangkok", "market", "shopping", "budget"),
                type = VideoType.SHORT
            )
        )
    }

    fun generateLongVideos(): List<VideoContent> {
        return listOf(
            VideoContent(
                id = "long-1",
                title = "Complete Guide to Thai Street Food: Bangkok Edition",
                description = "Join me as I explore the best street food vendors in Bangkok! From traditional Pad Thai to hidden gems, this comprehensive guide covers everything you need to know about Thai street food culture.",
                thumbnail = "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=225&fit=crop",
                videoUrl = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4",
                duration = "15:43",
                durationSeconds = 943,
                views = 524000,
                likes = 18500,
                dislikes = 234,
                comments = 1842,
                shares = 3200,
                bookmarks = 5600,
                channel = generateChannel("foodie-adventures"),
                uploadTime = Clock.System.now(),
                uploadTimeFormatted = "1 day ago",
                category = VideoCategory.FOOD,
                tags = listOf("street food", "bangkok", "thai cuisine", "travel"),
                type = VideoType.LONG
            ),
            VideoContent(
                id = "long-2",
                title = "Thai Language Crash Course for Travelers",
                description = "Learn essential Thai phrases for your trip to Thailand! Perfect for beginners who want to communicate with locals and enhance their travel experience.",
                thumbnail = "https://images.unsplash.com/photo-1544717297-fa95b6ee9643?w=400&h=225&fit=crop",
                videoUrl = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4",
                duration = "22:18",
                durationSeconds = 1338,
                views = 156000,
                likes = 9200,
                dislikes = 89,
                comments = 567,
                shares = 1100,
                bookmarks = 2300,
                channel = generateChannel("learn-thai"),
                uploadTime = Clock.System.now(),
                uploadTimeFormatted = "2 days ago",
                category = VideoCategory.EDUCATION,
                tags = listOf("thai language", "education", "travel", "learning"),
                type = VideoType.LONG
            )
        )
    }

    fun generateChannels(): List<ChannelInfo> {
        return listOf(
            generateChannel("thai-chef"),
            generateChannel("thai-culture"),
            generateChannel("bangkok-explorer"),
            generateChannel("foodie-adventures"),
            generateChannel("learn-thai")
        )
    }

    private fun generateChannel(id: String): ChannelInfo {
        return when (id) {
            "thai-chef" -> ChannelInfo(
                id = id,
                name = "Bangkok Street Chef",
                avatar = "https://images.unsplash.com/photo-1595273670150-bd0c3c392e46?w=150&h=150&fit=crop",
                banner = "https://images.unsplash.com/photo-1504674900247-0877df9cc836?w=800&h=200&fit=crop",
                description = "Authentic Thai street food recipes and cooking techniques from Bangkok's best chefs.",
                subscribers = 45000,
                totalVideos = 234,
                verified = true,
                category = VideoCategory.FOOD,
                joinedDate = "Jan 2020",
                location = "Bangkok, Thailand"
            )
            "thai-culture" -> ChannelInfo(
                id = id,
                name = "Thai Culture Hub",
                avatar = "https://images.unsplash.com/photo-1494790108755-2616b612b820?w=150&h=150&fit=crop",
                banner = "https://images.unsplash.com/photo-1528181304800-259b08848526?w=800&h=200&fit=crop",
                description = "Explore the rich culture, traditions, and modern life of Thailand through our videos.",
                subscribers = 89000,
                totalVideos = 156,
                verified = true,
                category = VideoCategory.ENTERTAINMENT,
                joinedDate = "Mar 2019",
                location = "Chiang Mai, Thailand"
            )
            "bangkok-explorer" -> ChannelInfo(
                id = id,
                name = "Bangkok Explorer",
                avatar = "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop",
                banner = "https://images.unsplash.com/photo-1508009603885-50cf7c579365?w=800&h=200&fit=crop",
                description = "Your guide to the best spots in Bangkok - from hidden gems to popular attractions.",
                subscribers = 32000,
                totalVideos = 89,
                verified = false,
                category = VideoCategory.TRAVEL,
                joinedDate = "Aug 2021",
                location = "Bangkok, Thailand"
            )
            "foodie-adventures" -> ChannelInfo(
                id = id,
                name = "Southeast Asian Foodie",
                avatar = "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop",
                banner = "https://images.unsplash.com/photo-1504674900247-0877df9cc836?w=800&h=200&fit=crop",
                description = "Food adventures across Southeast Asia. Discover the best local cuisines and hidden food gems.",
                subscribers = 235000,
                totalVideos = 412,
                verified = true,
                category = VideoCategory.FOOD,
                joinedDate = "Jun 2018",
                location = "Singapore"
            )
            "learn-thai" -> ChannelInfo(
                id = id,
                name = "Thai Language Academy",
                avatar = "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop",
                banner = "https://images.unsplash.com/photo-1544717297-fa95b6ee9643?w=800&h=200&fit=crop",
                description = "Learn Thai language easily with our structured lessons and practical conversations.",
                subscribers = 87000,
                totalVideos = 178,
                verified = true,
                category = VideoCategory.EDUCATION,
                joinedDate = "Feb 2020",
                location = "Bangkok, Thailand"
            )
            else -> ChannelInfo(
                id = id,
                name = "Unknown Channel",
                avatar = "",
                description = "",
                subscribers = 0,
                totalVideos = 0,
                verified = false,
                category = VideoCategory.ALL,
                joinedDate = "Unknown"
            )
        }
    }

    fun formatViews(views: Long): String {
        return when {
            views >= 1000000 -> {
                val millions = views / 1000000.0
                if (millions % 1 == 0.0) "${millions.toInt()}M" else "${(millions * 10).toInt() / 10.0}M"
            }
            views >= 1000 -> {
                val thousands = views / 1000.0
                if (thousands % 1 == 0.0) "${thousands.toInt()}K" else "${(thousands * 10).toInt() / 10.0}K"
            }
            else -> views.toString()
        }
    }

    fun formatSubscribers(subs: Long): String = formatViews(subs)
}