/**
 * Video Service Type Definitions
 *
 * This file contains all type definitions for the video service API,
 * following YouTube/TikTok-style video platform patterns. These types
 * ensure type safety across the entire video service integration.
 *
 * Features:
 * - Complete video content modeling
 * - Channel and creator management
 * - Live streaming support
 * - Analytics and engagement tracking
 * - Comment and interaction systems
 * - Playlist management
 * - Comprehensive metadata support
 */

// =============================================================================
// Core Video Types
// =============================================================================

/**
 * Video types following TikTok/YouTube patterns
 */
export enum VideoType {
  SHORT = 'SHORT',  // TikTok-style short videos (< 60s)
  LONG = 'LONG'     // YouTube-style long videos (> 60s)
}

/**
 * Video categories for content organization
 */
export enum VideoCategory {
  ALL = 'ALL',
  TRENDING = 'TRENDING',
  FOOD = 'FOOD',
  MUSIC = 'MUSIC',
  ENTERTAINMENT = 'ENTERTAINMENT',
  EDUCATION = 'EDUCATION',
  TRAVEL = 'TRAVEL',
  BUSINESS = 'BUSINESS',
  GAMING = 'GAMING',
  TECH = 'TECH',
  LIFESTYLE = 'LIFESTYLE',
  SPORTS = 'SPORTS',
  NEWS = 'NEWS'
}

/**
 * Video quality options
 */
export enum VideoQuality {
  AUTO = 'AUTO',
  QUALITY_144P = 'QUALITY_144P',
  QUALITY_240P = 'QUALITY_240P',
  QUALITY_360P = 'QUALITY_360P',
  QUALITY_480P = 'QUALITY_480P',
  QUALITY_720P = 'QUALITY_720P',
  QUALITY_1080P = 'QUALITY_1080P',
  QUALITY_1440P = 'QUALITY_1440P',
  QUALITY_2160P = 'QUALITY_2160P'
}

/**
 * Subtitle track information
 */
export interface SubtitleTrack {
  /** Language name (e.g., "English") */
  language: string;
  /** Language code (e.g., "en") */
  languageCode: string;
  /** Subtitle file URL */
  url: string;
  /** Whether subtitles are auto-generated */
  autoGenerated: boolean;
}

/**
 * Sponsored content segments within videos
 */
export interface SponsoredSegment {
  /** Start time in seconds */
  startTime: number;
  /** End time in seconds */
  endTime: number;
  /** Segment type (sponsor, intro, outro, etc.) */
  type: string;
  /** Optional segment title */
  title?: string;
}

/**
 * Channel information
 */
export interface ChannelInfo {
  /** Unique channel identifier */
  id: string;
  /** Channel display name */
  name: string;
  /** Channel avatar image URL */
  avatar: string;
  /** Channel banner image URL */
  banner?: string;
  /** Channel description */
  description: string;
  /** Number of subscribers */
  subscribers: number;
  /** Total number of videos */
  totalVideos: number;
  /** Verified channel status */
  verified: boolean;
  /** Primary channel category */
  category: VideoCategory;
  /** Channel creation date */
  joinedDate: string;
  /** Channel location */
  location?: string;
  /** User subscription status (user-specific) */
  isSubscribed: boolean;
  /** Notification preferences (user-specific) */
  notificationsEnabled: boolean;
  /** Channel website URL */
  website?: string;
  /** Social media links */
  socialLinks: Record<string, string>;
}

/**
 * Main video content interface
 */
export interface VideoContent {
  /** Unique video identifier */
  id: string;
  /** Video title */
  title: string;
  /** Video description */
  description: string;
  /** Thumbnail image URL */
  thumbnail: string;
  /** Video file URL (null if processing) */
  videoUrl: string | null;
  /** Human-readable duration (e.g., "2:34") */
  duration: string;
  /** Duration in seconds */
  durationSeconds: number;
  /** Total view count */
  views: number;
  /** Total likes */
  likes: number;
  /** Total dislikes */
  dislikes: number;
  /** Total comments */
  comments: number;
  /** Total shares */
  shares: number;
  /** Total bookmarks */
  bookmarks: number;
  /** Channel information */
  channel: ChannelInfo;
  /** Upload timestamp */
  uploadTime: string;
  /** Formatted upload time (e.g., "2 hours ago") */
  uploadTimeFormatted: string;
  /** Live stream indicator */
  isLive: boolean;
  /** Private video status */
  isPrivate: boolean;
  /** Premium content flag */
  isPremium: boolean;
  /** Video category */
  category: VideoCategory;
  /** Video tags */
  tags: string[];
  /** Video type (SHORT/LONG) */
  type: VideoType;
  /** Video language */
  language: string;
  /** Available subtitle tracks */
  subtitles: SubtitleTrack[];
  /** Available video qualities */
  qualities: VideoQuality[];
  /** Age restriction flag */
  ageRestricted: boolean;
  /** Monetization status */
  monetized: boolean;
  /** Sponsored content segments */
  sponsoredSegments: SponsoredSegment[];
}

// =============================================================================
// Comment System Types
// =============================================================================

/**
 * Video comment with nested replies
 */
export interface VideoComment {
  /** Unique comment identifier */
  id: string;
  /** Associated video ID */
  videoId: string;
  /** Commenter user ID */
  userId: string;
  /** Commenter avatar URL */
  userAvatar: string;
  /** Commenter username */
  username: string;
  /** Commenter display name */
  displayName?: string;
  /** Verified user status */
  isVerified: boolean;
  /** Comment content */
  content: string;
  /** Comment timestamp */
  timestamp: string;
  /** Formatted timestamp (e.g., "2 hours ago") */
  timeFormatted: string;
  /** Comment likes */
  likes: number;
  /** Comment dislikes */
  dislikes: number;
  /** Nested reply comments */
  replies: VideoComment[];
  /** Edit status */
  isEdited: boolean;
  /** Pinned by creator */
  isPinned: boolean;
  /** Hearted by video creator */
  isHeartedByCreator: boolean;
  /** Mentioned users in comment */
  mentionedUsers: string[];
  /** Is this a reply to another comment */
  isReply: boolean;
  /** Parent comment ID (if reply) */
  parentCommentId?: string;
}

// =============================================================================
// Playlist Types
// =============================================================================

/**
 * Video playlist information
 */
export interface VideoPlaylist {
  /** Unique playlist identifier */
  id: string;
  /** Playlist title */
  title: string;
  /** Playlist description */
  description: string;
  /** Playlist thumbnail URL */
  thumbnail: string;
  /** Creator user ID */
  creatorId: string;
  /** Creator display name */
  creatorName: string;
  /** Array of video IDs in playlist */
  videoIds: string[];
  /** Number of videos in playlist */
  videoCount: number;
  /** Total playlist duration */
  totalDuration: string;
  /** Private playlist status */
  isPrivate: boolean;
  /** Collaborative playlist flag */
  isCollaborative: boolean;
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
  /** Playlist view count */
  views: number;
  /** Playlist category */
  category: VideoCategory;
}

// =============================================================================
// Live Streaming Types
// =============================================================================

/**
 * Live stream status
 */
export type LiveStreamStatus = 'SCHEDULED' | 'LIVE' | 'ENDED' | 'CANCELLED';

/**
 * Live stream information
 */
export interface LiveStream {
  /** Unique stream identifier */
  id: string;
  /** Stream title */
  title: string;
  /** Stream description */
  description: string;
  /** Stream thumbnail URL */
  thumbnail: string;
  /** Live stream URL */
  streamUrl: string;
  /** Chat integration URL */
  chatUrl?: string;
  /** Channel ID hosting the stream */
  channelId: string;
  /** Stream start timestamp */
  startedAt: string;
  /** Scheduled start time */
  scheduledFor?: string;
  /** Current live viewers */
  currentViewers: number;
  /** Peak concurrent viewers */
  peakViewers: number;
  /** Total unique views */
  totalViews: number;
  /** Stream status */
  status: LiveStreamStatus;
  /** Stream category */
  category: VideoCategory;
  /** Stream tags */
  tags: string[];
  /** Private stream status */
  isPrivate: boolean;
  /** Premium content flag */
  isPremium: boolean;
  /** Age restriction */
  ageRestricted: boolean;
  /** Chat enabled status */
  chatEnabled: boolean;
  /** Chat slow mode (seconds between messages) */
  chatSlowMode: number;
  /** Subscribers-only chat */
  subscribersOnly: boolean;
  /** Followers-only chat */
  followersOnly: boolean;
}

// =============================================================================
// Analytics Types
// =============================================================================

/**
 * Audience retention data point
 */
export interface AudienceRetentionPoint {
  /** Time in seconds */
  timeSeconds: number;
  /** Retention percentage at this time */
  retentionPercentage: number;
}

/**
 * Demographics breakdown
 */
export interface Demographics {
  /** Age group distribution */
  ageGroups: Record<string, number>;
  /** Gender distribution */
  genders: Record<string, number>;
  /** Country distribution */
  countries: Record<string, number>;
  /** Device type distribution */
  devices: Record<string, number>;
}

/**
 * Revenue data (for monetized content)
 */
export interface RevenueData {
  /** Total revenue */
  totalRevenue: number;
  /** Revenue currency */
  currency: string;
  /** Ad revenue */
  adRevenue: number;
  /** Membership revenue */
  membershipRevenue: number;
  /** Super chat revenue */
  superchatRevenue: number;
  /** Merchandise revenue */
  merchandiseRevenue: number;
}

/**
 * Comprehensive video analytics
 */
export interface VideoAnalytics {
  /** Associated video ID */
  videoId: string;
  /** Total views */
  views: number;
  /** Unique viewers */
  uniqueViewers: number;
  /** Total watch time (seconds) */
  watchTime: number;
  /** Average view duration (seconds) */
  averageViewDuration: number;
  /** Total likes */
  likes: number;
  /** Total dislikes */
  dislikes: number;
  /** Total comments */
  comments: number;
  /** Total shares */
  shares: number;
  /** Subscribers gained from this video */
  subscribersGained: number;
  /** Subscribers lost from this video */
  subscribersLost: number;
  /** Click-through rate (percentage) */
  clickThroughRate: number;
  /** Retention rate (percentage) */
  retentionRate: number;
  /** Engagement rate (percentage) */
  engagementRate: number;
  /** Audience retention curve */
  audienceRetention: AudienceRetentionPoint[];
  /** Traffic source breakdown */
  trafficSources: Record<string, number>;
  /** Demographic analytics */
  demographics: Demographics;
  /** Revenue analytics (if applicable) */
  revenueData?: RevenueData;
}

// =============================================================================
// API Response Types
// =============================================================================

/**
 * Generic paginated response wrapper
 */
export interface PaginatedResponse<T> {
  /** Request success status */
  success: boolean;
  /** Array of data items */
  data: T[];
  /** Pagination metadata */
  pagination: {
    /** Current page number */
    page: number;
    /** Items per page */
    limit: number;
    /** Total number of items */
    total: number;
    /** Total number of pages */
    totalPages: number;
    /** Has next page */
    hasNext: boolean;
    /** Has previous page */
    hasPrevious: boolean;
  };
  /** Applied filters */
  filters?: Record<string, any>;
  /** Optional message */
  message?: string;
}

/**
 * Generic single item response wrapper
 */
export interface SingleResponse<T> {
  /** Request success status */
  success: boolean;
  /** Single data item */
  data: T;
  /** Optional message */
  message?: string;
}

/**
 * Error response format
 */
export interface ErrorResponse {
  /** Always false for errors */
  success: false;
  /** Error message */
  error: string;
  /** Detailed validation errors */
  details?: Record<string, string[]>;
  /** Error code */
  code?: string;
}

// =============================================================================
// Utility Types
// =============================================================================

/**
 * Video interaction types
 */
export type VideoInteractionType = 'LIKE' | 'DISLIKE' | 'BOOKMARK' | 'SHARE' | 'REMOVE_LIKE' | 'REMOVE_DISLIKE' | 'REMOVE_BOOKMARK';

/**
 * Channel subscription actions
 */
export type SubscriptionAction = 'SUBSCRIBE' | 'UNSUBSCRIBE';

/**
 * Video sorting options
 */
export type VideoSortBy = 'uploadTime' | 'views' | 'likes' | 'trending' | 'duration';

/**
 * Search sorting options
 */
export type SearchSortBy = 'RELEVANCE' | 'VIEW_COUNT' | 'UPLOAD_DATE' | 'RATING';

/**
 * Upload date filters
 */
export type UploadDateFilter = 'THIS_HOUR' | 'TODAY' | 'THIS_WEEK' | 'THIS_MONTH' | 'THIS_YEAR';

/**
 * Duration filters for search
 */
export type DurationFilter = 'SHORT' | 'MEDIUM' | 'LONG';

/**
 * Comment sorting options
 */
export type CommentSortBy = 'TOP' | 'NEW' | 'CONTROVERSIAL';

/**
 * Analytics time ranges
 */
export type AnalyticsTimeRange = 'LAST_7_DAYS' | 'LAST_30_DAYS' | 'LAST_90_DAYS' | 'LAST_YEAR' | 'ALL_TIME';

// =============================================================================
// Re-export commonly used types
// =============================================================================

export type {
  VideoContent as Video,
  ChannelInfo as Channel,
  VideoComment as Comment,
  VideoPlaylist as Playlist,
  LiveStream as Stream,
  VideoAnalytics as Analytics,
};

// Export all enums for easy access
export {
  VideoType,
  VideoCategory,
  VideoQuality,
};

// =============================================================================
// Backend Integration Types
// =============================================================================

/**
 * Video status for backend integration
 */
export type VideoStatus =
  | 'processing'
  | 'available'
  | 'unavailable'
  | 'archived'
  | 'deleted';

/**
 * Platform types for cross-platform sync
 */
export type PlatformType =
  | 'web'
  | 'ios'
  | 'android'
  | 'mobile_web';

/**
 * Playback state for video player
 */
export type PlaybackState =
  | 'playing'
  | 'paused'
  | 'buffering'
  | 'ended'
  | 'error';

/**
 * Content rating system
 */
export type ContentRating =
  | 'g'        // General Audiences
  | 'pg'       // Parental Guidance
  | 'pg13'     // Parents Strongly Cautioned
  | 'r'        // Restricted
  | 'nc17'     // Adults Only
  | 'unrated'; // Not Rated

/**
 * Buffer health information
 */
export interface BufferHealth {
  buffered_seconds: number;
  buffer_percentage: number;
  is_healthy: boolean;
}

/**
 * Cross-platform sync status
 */
export interface SyncStatus {
  last_sync_time: string;
  synced_platforms: string[];
  conflict_detected: boolean;
}

/**
 * Video upload request
 */
export interface VideoUploadRequest {
  file: File;
  title: string;
  description: string;
  tags: string[];
  content_rating: ContentRating;
  thumbnail?: File;
  category?: string;
  is_monetized?: boolean;
  price?: number;
}

/**
 * Video upload response
 */
export interface VideoUploadResponse {
  video_id: string;
  status: VideoStatus;
  message: string;
  upload_progress?: number;
}

/**
 * Video stream request
 */
export interface VideoStreamRequest {
  video_id: string;
  quality?: string;
  platform?: PlatformType;
}

/**
 * Video stream response
 */
export interface VideoStreamResponse {
  video_id: string;
  stream_url: string;
  protocol: string;
  manifest_url?: string;
  available_qualities: string[];
  default_quality: string;
  duration_seconds: number;
  status: VideoStatus;
  expires_at: string;
}

/**
 * Playback session information
 */
export interface PlaybackSession {
  id: string;
  video_id: string;
  user_id: string;
  platform: PlatformType;
  current_position: number;
  quality: string;
  playback_state: PlaybackState;
  buffer_health: BufferHealth;
  started_at: string;
  last_activity: string;
}

/**
 * Redux state for video management
 */
export interface VideoState {
  videos: VideoContent[];
  currentVideo: VideoContent | null;
  playbackState: Record<string, {
    position: number;
    state: PlaybackState;
    quality: string;
    sessionId?: string;
  }>;
  uploadProgress: Record<string, number>;
  syncStatus: Record<string, SyncStatus>;
  loading: boolean;
  error: VideoError | null;
}

/**
 * Video error information
 */
export interface VideoError {
  code: string;
  message: string;
  details?: Record<string, any>;
}

/**
 * Playback position update payload
 */
export interface PlaybackPositionUpdate {
  videoId: string;
  position: number;
  sessionId: string;
}

/**
 * Playback quality update payload
 */
export interface PlaybackQualityUpdate {
  videoId: string;
  quality: string;
}

/**
 * Playback state update payload
 */
export interface PlaybackStateUpdate {
  videoId: string;
  state: PlaybackState;
}

/**
 * Buffer health update payload
 */
export interface BufferHealthUpdate {
  videoId: string;
  bufferedSeconds: number;
  bufferPercentage: number;
}